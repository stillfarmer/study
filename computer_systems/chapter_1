
Processor

    Processor performs the same basic task:

    1. It reads the instruction from memory pointed at by the PC.
    2. interprets the bits in the instruction.
    3. performs some simple operation dictated by the instruction.
    4. updates the PC to point to the next instruction, which may or may not be contiguous in memory to the instruction that 
       just executed.
 


    Simple operations resolve around:
    
    1. main memory.
    2. register file. ( a small storage device that consists of a collection of word-sized registers, each with its own unique name.)
    3. ALU. ( computes new data and address values.)




    Simple operations the CPU might carry out at the request of an instruction:

    1. Load:   Copy a byte or a word from main memory into a register, overwriting the previous contents of the register.
    2. Store:  Copy the a byte or a word from a register to a location in main memory, overwriting the previous contents of that location.
    3. Update: Copy the contents of two registers to the ALU, which adds the two words together and store the result in a register, 
               overwring the previous contents of that register.
    4. I/O read: Copy a byte or a word from an I/O device into a register.
    5. I/O Write: Copy a byte or a word from a register to an I/O device.
    6. Jump: Extract a word from the instruction itself and copy that word into the (PC), overwriting the previous value of the PC.



    Running the hello program:
    
    1. Type the characters hello at the keyboard, the shell program reads each one into a register, and then stores it in memory.

    2. Hit the enter key on the keyboard, the shell knows that we have finished typing the command, shell loads the executable
       hello file by executing a sequence of instructions that copies the code and data in the hello object from disk to memory.
       The data include the string "hello world\n" that will eventually be printed out.

    3. Using a technique known as DMA( direct memory pass), the data travels directly from disk to main memory, without passing through
       the processor.

    4. Once the code and data in the hello object file are loaded into memory, the processor begins to executing the machine-language 
       instructions in the hello program's main routine.  These instructions copy the bytes in the "hello, world\n" string from memory
       to the register file, and from there to the display device, where they are displayed on the screen.

       machine instructions in the hello program: disk -> main memory -> processor.
       data string "hello world\n"              : disk -> main memory -> display device


1.5 Cache Matter

    L1 & L2 caches are implemented with a hardware technology known as SRAM(Static Random Access Memory).  


1.6 Storage Devices Form a Hierarchy 

                         L0: registers
	       
	               L1:  on-chip L1 cache (SRAM) 

		    L2: off-chip L2 chache (SRAM)

		  L3: main memory (DRAM)

		L4: local secondary storage ( local disks)

	      L5: remote secondary storage ( distrubuted file systems, Web Servers)


1.7 The Operating System Manages the Hardware

    +----------------processes----------------------+
    |                                               | 
    |             +----- virtual memory-------------+
    |             |                                 |
    |             |                 +---------------+
    |             |                 |     files     |
    +-------------+-----------------+---------------+
    |   processor |    main memory  |   I/O devices |
    +-------------+-----------------+---------------+


    1.7.1 Processes

        A process is the operating systems's abstraction for a running program. 
	The operating system performs this interleaving with a mechanism known as context switching.

	The operating system keeps track of all the state info that the process need to run. 
	This state, which is known as the context, includes info such as
	    (1) current values of PC,
	    (2) the register file,
	    (3) the contents of main memory.

	At any point  in time, exactly one process is running on the system.
	When the operating system decides to transfer control from the current process to a some new process, 
	it performs a context switch by saving the context of the current process, restoring the context of the
	the new process, and then passing control to the new process. The new process picks up exactly where 
	it left off.

    1.7.2 Threads 

        Threads run in the context of the process and share the same code and global data.

    
    1.7.3 Virtual Memory

       Virtual Memory is an abstraction that provides each process with the illusion that it has the exclusive use of the
       main memory. 
       
       Each process has the same uniform view of memory, which is known as its virtual address space.


    1.7.4 Files

        A Unix file is a sequence of bytes, nothing more and nothing less.

	All input and output in the system is performed by reading and writing files using a set of operating system functions
	known as system calls.


1.8 System Communicate With Other Systems Using Networks
